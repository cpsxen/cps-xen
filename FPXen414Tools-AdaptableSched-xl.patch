diff -urBN xen-4.1.4-org/tools/libxl/libxl.c xen-4.1.4-pg/tools/libxl/libxl.c
--- xen-4.1.4-org/tools/libxl/libxl.c	2012-12-18 13:54:18.000000000 +0100
+++ xen-4.1.4-pg/tools/libxl/libxl.c	2015-01-07 15:00:30.749891842 +0100
@@ -2633,6 +2634,108 @@
     return 0;
 }
 
+int libxl_sched_fp_schedule_get(libxl_ctx *ctx, libxl_sched_fp *scinfo)
+{
+    struct xen_sysctl_fp_schedule schedule;
+    int rc;
+
+    rc = xc_sched_fp_schedule_get(ctx->xch, &schedule);
+    if (rc != 0) {
+        LIBXL__LOG_ERRNO(ctx, LIBXL__LOG_ERROR, "setting schedule sched fp");
+        return ERROR_FAIL;
+    }
+    
+    scinfo->strategy = schedule.strategy;
+    
+    return 0;
+}
+
+int libxl_sched_fp_schedule_set(libxl_ctx *ctx, libxl_sched_fp *scinfo)
+{
+    struct xen_sysctl_fp_schedule schedule;
+    int rc;
+    
+    if (scinfo->strategy > 2 || scinfo->strategy < 0) {
+        LIBXL__LOG_ERRNO(ctx, LIBXL__LOG_ERROR, "Unknown strategy. Valid values are 0 for rate-monotonic, 1 for deadline-monotonic or 2 for fixed priority.");
+        return ERROR_INVAL;
+    }
+    
+    schedule.strategy = scinfo->strategy;
+    rc = xc_sched_fp_schedule_set(ctx->xch, &schedule);
+
+    if (rc != 0) {
+        LIBXL__LOG_ERRNO(ctx, LIBXL__LOG_ERROR, "setting schedule sched fp");
+        return ERROR_FAIL;
+    }
+    
+    return 0;
+}
+
+int libxl_sched_fp_domain_get(libxl_ctx *ctx, uint32_t domid, libxl_sched_fp *scinfo)
+{
+    struct xen_domctl_sched_fp sdom;
+    int rc;
+    
+    rc = xc_sched_fp_domain_get(ctx->xch, domid, &sdom);
+    if (rc != 0) {
+        LIBXL__LOG_ERRNO(ctx, LIBXL__LOG_ERROR, "getting domain sched fp");
+        return ERROR_FAIL;
+    }
+
+    scinfo->priority = sdom.priority;
+    scinfo->period = sdom.period;
+    scinfo->slice = sdom.slice;
+    scinfo->deadline = sdom.deadline;
+
+    return 0;
+}
+
+int libxl_sched_fp_domain_set(libxl_ctx *ctx, uint32_t domid, libxl_sched_fp *scinfo)
+{
+    struct xen_domctl_sched_fp sdom;
+    xc_domaininfo_t domaininfo;
+    int rc;
+
+    rc = xc_domain_getinfolist(ctx->xch, domid, 1, &domaininfo);
+    if (rc <  0) {
+        LIBXL__LOG_ERRNO(ctx, LIBXL__LOG_ERROR, "getting domain info list");
+        return ERROR_FAIL;
+    }
+    if (rc != 1 || domaininfo.domain != domid)
+        return ERROR_INVAL;
+
+    if (scinfo->period < 0) {
+        LIBXL__LOG_ERRNOVAL(ctx, LIBXL__LOG_ERROR, rc, 
+            "Period out of range. Valid values are positive integers.");
+        return ERROR_INVAL;
+    }
+
+    if (scinfo->deadline < 0) {
+        LIBXL__LOG_ERRNOVAL(ctx, LIBXL__LOG_ERROR, rc, 
+            "Deadline out of range. Valid values are positive integers.");
+        return ERROR_INVAL;
+    }
+    
+    if (scinfo->slice < 0) {
+        LIBXL__LOG_ERRNOVAL(ctx, LIBXL__LOG_ERROR, rc, 
+            "Slice out of range. Valid values are positive integers.");
+        return ERROR_INVAL;
+    }
+
+    sdom.priority = scinfo->priority;
+    sdom.slice = scinfo->slice;
+    sdom.period = scinfo->period;
+    sdom.deadline = scinfo->deadline;
+
+    rc = xc_sched_fp_domain_set(ctx->xch, domid, &sdom);
+    if ( rc < 0 ) {
+        LIBXL__LOG_ERRNO(ctx, LIBXL__LOG_ERROR, "setting domain sched credit");
+        return ERROR_FAIL;
+    }
+
+    return 0;
+}
+    
 static int trigger_type_from_string(char *trigger_name)
 {
     if (!strcmp(trigger_name, "nmi"))
Binary files xen-4.1.4-org/tools/libxl/.libxl.c.swp and xen-4.1.4-pg/tools/libxl/.libxl.c.swp differ
diff -urBN xen-4.1.4-org/tools/libxl/libxl.h xen-4.1.4-pg/tools/libxl/libxl.h
--- xen-4.1.4-org/tools/libxl/libxl.h	2012-12-18 13:54:18.000000000 +0100
+++ xen-4.1.4-pg/tools/libxl/libxl.h	2015-01-06 15:38:06.195486818 +0100
@@ -514,6 +514,13 @@
                                   libxl_sched_credit *scinfo);
 int libxl_sched_credit_domain_set(libxl_ctx *ctx, uint32_t domid,
                                   libxl_sched_credit *scinfo);
+
+int libxl_sched_fp_schedule_get(libxl_ctx *ctx, libxl_sched_fp *scinfo);
+int libxl_sched_fp_schedule_set(libxl_ctx *ctx, libxl_sched_fp *scinfo);
+
+int libxl_sched_fp_domain_get(libxl_ctx *ctx, uint32_t domid, libxl_sched_fp *scinfo);
+int libxl_sched_fp_domain_set(libxl_ctx *ctx, uint32_t domid, libxl_sched_fp *scinfo);
+
 int libxl_send_trigger(libxl_ctx *ctx, uint32_t domid,
                        char *trigger_name, uint32_t vcpuid);
 int libxl_send_sysrq(libxl_ctx *ctx, uint32_t domid, char sysrq);
diff -urBN xen-4.1.4-org/tools/libxl/libxl.idl xen-4.1.4-pg/tools/libxl/libxl.idl
--- xen-4.1.4-org/tools/libxl/libxl.idl	2012-12-18 13:54:18.000000000 +0100
+++ xen-4.1.4-pg/tools/libxl/libxl.idl	2015-01-06 13:52:02.569476062 +0100
@@ -320,6 +320,14 @@
     ("cap", integer),
     ], destructor_fn=None)
 
+libxl_sched_fp = Struct("sched_fp", [
+    ("strategy", uint8),
+    ("priority", integer),
+    ("slice", uint64),
+    ("period", uint64),
+    ("deadline", uint64),
+    ], destructor_fn=None)
+
 libxl_net2info = Struct("net2info", [
     ("backend", string),
     ("backend_id", uint32),
diff -urBN xen-4.1.4-org/tools/libxl/libxl_utils.c xen-4.1.4-pg/tools/libxl/libxl_utils.c
--- xen-4.1.4-org/tools/libxl/libxl_utils.c	2012-12-18 13:54:18.000000000 +0100
+++ xen-4.1.4-pg/tools/libxl/libxl_utils.c	2014-12-12 15:07:03.479482722 +0100
@@ -38,6 +38,7 @@
 
 static struct schedid_name schedid_name[] = {
     { "credit", XEN_SCHEDULER_CREDIT },
+    { "fp", XEN_SCHEDULER_FP },
     { "sedf", XEN_SCHEDULER_SEDF },
     { "credit2", XEN_SCHEDULER_CREDIT2 },
     { NULL, -1 }
diff -urBN xen-4.1.4-org/tools/libxl/xl_cmdimpl.c xen-4.1.4-pg/tools/libxl/xl_cmdimpl.c
--- xen-4.1.4-org/tools/libxl/xl_cmdimpl.c	2012-12-18 13:54:19.000000000 +0100
+++ xen-4.1.4-pg/tools/libxl/xl_cmdimpl.c	2015-01-09 14:37:48.136329002 +0100
@@ -3974,6 +3974,180 @@
     return 0;
 }
 
+static int sched_fp_schedule_set(libxl_sched_fp *scinfo)
+{
+    int rc;
+     
+    rc = libxl_sched_fp_schedule_set(&ctx, scinfo);
+    if (rc)
+        fprintf(stderr, "libxl_sched_fp_schedule_set failed.\n");
+
+    return rc;
+}
+
+static int sched_fp_domain_get(
+    int domid, libxl_sched_fp *scinfo)
+{
+    int rc;
+    
+    rc = libxl_sched_fp_domain_get(&ctx, domid, scinfo);
+    if (rc)
+        fprintf(stderr, "libxl_sched_fp_domain_get failed.\n");
+
+    return rc;
+}
+
+
+static int sched_fp_domain_set(
+    int domid, libxl_sched_fp *scinfo)
+{
+    int rc;
+
+    rc = libxl_sched_fp_domain_set(&ctx, domid, scinfo);
+    if (rc)
+        fprintf(stderr, "libxl_sched_fp_domain_set failed.\n");
+
+    return rc;
+}
+
+static void sched_fp_domain_output(
+    int domid, libxl_sched_fp *scinfo)
+{
+    char *domname;
+    domname = libxl_domid_to_name(&ctx, domid);
+    printf("%-32s %5d %9u %10u %10u %8i\n",
+        domname,
+        domid,
+        (unsigned int)scinfo->slice,
+        (unsigned int)scinfo->period,
+	(unsigned int)scinfo->deadline,
+	(int)scinfo->priority);
+    free(domname);
+}
+
+
+int main_sched_fp(int argc, char **argv)
+{
+    libxl_sched_fp scinfo;
+    int strategy = 0, priority = 0, period = 0, slice = 0, deadline = 0;
+    int opt, rc;
+    const char *dom = NULL;
+    int opt_S = 0, opt_P = 0, opt_D = 0, opt_p = 0, opt_s = 0;
+    const char *strat = NULL;
+
+    libxl_dominfo *info;
+    int nb_domain, i;
+
+    /* Set default values, otherwise ranmdom values would be set when setting incomplete parameters. */
+    scinfo.strategy = 0;
+    scinfo.period = 0;
+    scinfo.priority = 0;
+    scinfo.deadline = 0;
+    scinfo.slice = 0;
+
+    while ((opt = getopt(argc, argv, "hd:p:P:s:S:D:")) != -1) {
+        switch (opt) {
+            case 'h':
+                help("sched-fp");
+                return 0;
+            case 'd':
+                dom = optarg;
+                break;
+            case 'S':
+                strategy = strtol(optarg, NULL, 10);
+                opt_S = 1;
+                break;
+            case 'p':
+                priority = strtol(optarg, NULL, 10);
+                opt_p = 1;
+                break;
+            case 'P':
+                period = strtol(optarg, NULL, 10);
+                opt_P = 1;
+                break;
+            case 's':
+                slice = strtol(optarg, NULL, 10);
+                opt_s = 1;
+                break;
+            case 'D':
+                deadline = strtol(optarg, NULL, 10);
+                opt_D = 1;
+                break;
+            default:
+                fprintf(stderr, "option `%c` not supported.\n", optopt);
+                break;
+        }
+    }
+    
+    if (!opt_S && !opt_P && !opt_D && !opt_s && !opt_p) {
+        rc = libxl_sched_fp_schedule_get(&ctx, &scinfo);
+        if (rc != 0) {
+            fprintf(stderr, "libxl_sched_fp_schedule_get failed.\n");
+            return 1;
+        }
+        
+        switch (scinfo.strategy) {
+        case 0: strat = "rate-monotonic"; break;
+        case 1: strat = "deadline-monotonic"; break;
+        case 2: strat = "fixed priority"; break;
+        }
+        
+        printf("%s SMP scheduler\n", strat);
+
+        printf("%-33s %4s %-4s %-4s %-4s %-4s\n", "Name", "ID", "Slice(us)", "Period(us)", "Deadline(us)", "Priority");
+        if (!dom) {
+            info = libxl_list_domain(&ctx, &nb_domain);
+            if (!info) {
+                fprintf(stderr, "libxl_domain_infolist failed.\n");
+                return 1;
+            }
+            
+            for (i = 0; i < nb_domain; i++) {
+                rc = sched_fp_domain_get(info[i].domid, &scinfo);
+                if (rc)
+                    return -rc;
+                sched_fp_domain_output(info[i].domid, &scinfo);
+            }
+        } else {
+            find_domain(dom);
+            
+            rc = sched_fp_domain_get(domid, &scinfo);
+            if (rc)
+                return -rc;
+            sched_fp_domain_output(domid, &scinfo);
+        }
+    } else {
+        if (opt_S) {
+            scinfo.strategy = strategy;
+            rc = sched_fp_schedule_set(&scinfo);
+            if (rc)
+                return -rc;
+        }
+
+	    if (dom) 
+            find_domain(dom);
+
+        if (opt_p) 
+            scinfo.priority = priority;
+        if (opt_P)
+            scinfo.period = period;
+        if (opt_s)
+            scinfo.slice = slice;
+        if (opt_D)
+            scinfo.deadline = deadline;
+
+        rc = sched_fp_domain_set(domid, &scinfo);
+        if (rc)
+            return -rc;
+    // TODO: implement setting of scheduling parameters
+        
+    }
+    
+    return 0;
+}
+
+            
+
 int main_domid(int argc, char **argv)
 {
     int opt;
Binary files xen-4.1.4-org/tools/libxl/.xl_cmdimpl.c.swp and xen-4.1.4-pg/tools/libxl/.xl_cmdimpl.c.swp differ
diff -urBN xen-4.1.4-org/tools/libxl/xl_cmdtable.c xen-4.1.4-pg/tools/libxl/xl_cmdtable.c
--- xen-4.1.4-org/tools/libxl/xl_cmdtable.c	2012-12-18 13:54:19.000000000 +0100
+++ xen-4.1.4-pg/tools/libxl/xl_cmdtable.c	2015-01-09 14:36:47.862481002 +0100
@@ -195,6 +195,18 @@
       "-w WEIGHT, --weight=WEIGHT     Weight (int)\n"
       "-c CAP, --cap=CAP              Cap (int)"
     },
+    { "sched-fp",
+      &main_sched_fp,
+      "Get/set fp scheduler parameters",
+      "[-d <Domain> [-p[=PRIORITY]|-P[=PERIOD]|-s[=SLICE]]|-D[=DEADLINE]] [-S[=STRATEGY]]",
+      "-d DOMAIN, --domain=DOMAIN           Domain to modify\n"
+      "-p PRIORITY, --priority=PRIORITY     Priority of the specified domain (int)\n"
+      "-P PERIOD, --period=PERIOD           Period (int)\n"
+      "-s SLICE, --slice=SLICE              Slice (int)\n"
+      "-S STRATEGY, --strategy=STRATEGY     Strategy to be used by the scheduler (int)\n"
+      "                                      STRATEGY can either be 0 (rate-monotonic), 1 (deadline-monotonic) or 2 (fixed priority).\n"
+      "-D DEADLINE, --deadline=DEADLINE     Deadline (int)\n"
+    },
     { "domid",
       &main_domid,
       "Convert a domain name to domain id",
diff -urBN xen-4.1.4-org/tools/libxl/xl.h xen-4.1.4-pg/tools/libxl/xl.h
--- xen-4.1.4-org/tools/libxl/xl.h	2012-12-18 13:54:18.000000000 +0100
+++ xen-4.1.4-pg/tools/libxl/xl.h	2014-12-12 15:12:46.514184722 +0100
@@ -54,6 +54,7 @@
 int main_memmax(int argc, char **argv);
 int main_memset(int argc, char **argv);
 int main_sched_credit(int argc, char **argv);
+int main_sched_fp(int argc, char** argv);
 int main_domid(int argc, char **argv);
 int main_domname(int argc, char **argv);
 int main_rename(int argc, char **argv);
